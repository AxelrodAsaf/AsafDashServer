///////////////////////////////////////////////////// Copied from CHATGPT /////////////////////////////////////////////////////

///////////////////////////////////////////////////// BACK-END /////////////////////////////////////////////////////

const jwt = require('jsonwebtoken');

// Secret key for signing JWT
const secretKey = 'secretKey';

// Route to handle user login
app.post('/login', (req, res) => {
  // Example user object with credentials
  const user = {
    username: 'user123',
    password: 'pass123'
  };

  // Authenticate user (in real-life scenario, you would check user credentials against a database)
  if (req.body.username === user.username && req.body.password === user.password) {
    // If authentication is successful, generate a JWT
    const token = jwt.sign({ username: user.username }, secretKey, { expiresIn: '1h' });

    // Send the JWT to the client
    res.json({
      success: true,
      message: 'Authentication successful.',
      token: token
    });
  } else {
    // If authentication fails, send an error message
    res.json({
      success: false,
      message: 'Incorrect username or password.'
    });
  }
});

// Middleware to protect routes with JWT
function verifyToken(req, res, next) {
  // Get the JWT from the request header
  const bearerHeader = req.headers['authorization'];

  // Check if bearer is undefined
  if (typeof bearerHeader !== 'undefined') {
    // Split the bearer and the JWT
    const bearer = bearerHeader.split(' ');
    const bearerToken = bearer[1];

    // Set the JWT
    req.token = bearerToken;

    // Verify the JWT
    jwt.verify(req.token, secretKey, (err, authData) => {
      if (err) {
        res.sendStatus(403);
      } else {
        // If the JWT is valid, pass the request to the next middleware or route
        next();
      }
    });
  } else {
    // If the bearer is undefined, return a forbidden error
    res.sendStatus(403);
  }
}

// Route to access a protected resource
app.get('/protected', verifyToken, (req, res) => {
  // Verify the JWT
  jwt.verify(req.token, secretKey, (err, authData) => {
    if (err) {
      res.sendStatus(403);
    } else {
      // If the JWT is valid, return the protected resource
      res.json({
        success: true,
        message: 'Access to protected resource granted.',
        authData: authData
      });
    }
  });
});





///////////////////////////////////////////////////// FRONT-END /////////////////////////////////////////////////////

// Function to send a login request to the server
async function login(username, password) {
  // Make a POST request to the server with the user credentials
  const response = await fetch('/login', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
